import os
import time
import requests
import logging
import random
from io import BytesIO
from threading import Thread
from flask import Flask
from PIL import Image
from deep_translator import GoogleTranslator
import schedule

# ------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ -------------------
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# ------------------- Flask —Å–µ—Ä–≤–µ—Ä -------------------
app = Flask(__name__)

@app.route('/')
def home():
    return "üöÜ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç."

def run_flask():
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

Thread(target=run_flask, daemon=True).start()

# ------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ -------------------
TELEGRAM_BOT_TOKEN = os.getenv("ELECTRICHKA_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("ELECTRICHKA_CHANNEL_ID")

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ELECTRICHKA_BOT_TOKEN –∏–ª–∏ ELECTRICHKA_CHANNEL_ID")
    exit(1)

POST_INTERVAL_HOURS = int(os.getenv("POST_INTERVAL_HOURS", "3"))
FIRMA_SIGNATURE = "‚Äî –í–∞—à–∏ –º—ã—Å–ª–∏ —Å –≠–ª–µ–∫—Ç—Ä–∏—á–∫–æ–π üöÜ"

HASHTAGS = ["#—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", "#—é–º–æ—Ä", "#—Ü–∏—Ç–∞—Ç–∞", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#–º—ã—Å–ª–∏"]
CATEGORIES = ["–∂–∏–∑–Ω—å", "—Å—á–∞—Å—Ç—å–µ", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "—é–º–æ—Ä", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è"]

LOGO_PATH = "logo.png"
CAPTIONS_FILE = os.getenv("ELECTRICHKA_CAPTIONS_FILE", "captions3.txt")

# ------------------- –§—É–Ω–∫—Ü–∏–∏ -------------------
def get_quote():
    try:
        res = requests.get("https://zenquotes.io/api/random", timeout=10)
        res.raise_for_status()
        data = res.json()[0]
        quote = data.get('q', '–¶–∏—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        author = data.get('a', '')
        return quote, author
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã: {e}")
        return "–¶–∏—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", ""

def translate_quote(text):
    try:
        return GoogleTranslator(source='en', target='ru').translate(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

def get_image():
    try:
        url = f"https://picsum.photos/800/600?random={int(time.time())}"
        img_bytes = requests.get(url, timeout=10).content
        image = Image.open(BytesIO(img_bytes)).convert("RGBA")
        return overlay_logo(image)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def overlay_logo(image):
    try:
        if not os.path.exists(LOGO_PATH):
            output = BytesIO()
            image.save(output, format="PNG")
            output.seek(0)
            return output

        logo = Image.open(LOGO_PATH).convert("RGBA")
        base_width = int(image.width * 0.15)
        w_percent = base_width / float(logo.width)
        h_size = int(float(logo.height) * w_percent)
        logo = logo.resize((base_width, h_size), Image.LANCZOS)
        position = (image.width - logo.width - 10, image.height - logo.height - 10)
        image.paste(logo, position, logo)

        output = BytesIO()
        image.save(output, format="PNG")
        output.seek(0)
        return output
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        output = BytesIO()
        image.save(output, format="PNG")
        output.seek(0)
        return output

def check_telegram():
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe"
        res = requests.get(url, timeout=10)
        return res.status_code == 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API: {e}")
        return False

def send_post(quote, author, image_bytes):
    if image_bytes is None:
        logging.warning("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return

    hashtags = " ".join(random.sample(HASHTAGS, k=2))
    category = random.choice(CATEGORIES)
    text = f"[{category.upper()}] {quote}\n‚Äî {author}\n{FIRMA_SIGNATURE}\n{hashtags}"

    if not check_telegram():
        logging.error("Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return

    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
        response = requests.post(
            url,
            data={"chat_id": TELEGRAM_CHAT_ID, "caption": text},
            files={"photo": ("image.png", image_bytes, "image/png")},
            timeout=15
        )
        if response.status_code == 200:
            logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def job_post():
    try:
        quote, author = get_quote()
        quote_ru = translate_quote(quote)
        image_bytes = get_image()
        full_quote = f"{quote} ({quote_ru})"
        send_post(full_quote, author, image_bytes)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")

# ------------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ -------------------
POST_INTERVAL_HOURS = int(os.getenv("POST_INTERVAL_HOURS", "3"))
schedule.every(POST_INTERVAL_HOURS).hours.do(job_post)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(30)

Thread(target=run_scheduler, daemon=True).start()

# ------------------- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª -------------------
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
while True:
    time.sleep(60)



