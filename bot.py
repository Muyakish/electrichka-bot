import os
import time
import requests
import random
from io import BytesIO
from threading import Thread
from flask import Flask, request, jsonify
from PIL import Image
from deep_translator import GoogleTranslator
import schedule

TELEGRAM_BOT_TOKEN = os.getenv("ELECTRICHKA_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("ELECTRICHKA_CHANNEL_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    print("[CRITICAL] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ELECTRICHKA_BOT_TOKEN –∏–ª–∏ ELECTRICHKA_CHANNEL_ID", flush=True)
    exit(1)

def load_captions():
    if os.path.exists("captions3.txt"):
        with open("captions3.txt", "r", encoding="utf-8") as f:
            lines = [line.strip() for line in f if line.strip()]
            if lines:
                return lines
    return ["üöÜ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞ —É–∂–µ —Ç—Ä–æ–Ω—É–ª–∞—Å—å ‚Äî –ø—Ä—ã–≥–∞–π –≤ –ø–æ—Ç–æ–∫ –∏–¥–µ–π!"]

FIRMA_SIGNATURES = load_captions()
HASHTAGS = ["#—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", "#—é–º–æ—Ä", "#—Ü–∏—Ç–∞—Ç–∞", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#–º—ã—Å–ª–∏"]
CATEGORIES = ["–∂–∏–∑–Ω—å", "—Å—á–∞—Å—Ç—å–µ", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "—é–º–æ—Ä", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è"]
LOGO_PATH = "logo.png"

def get_quote():
    try:
        res = requests.get("https://zenquotes.io/api/random", timeout=10)
        res.raise_for_status()
        data = res.json()[0]
        return data.get('q', '–¶–∏—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'), data.get('a', '')
    except Exception as e:
        print(f"[ERROR] –¶–∏—Ç–∞—Ç–∞: {e}", flush=True)
        return "–¶–∏—Ç–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", ""

def translate_quote(text):
    try:
        return GoogleTranslator(source='en', target='ru').translate(text)
    except Exception as e:
        print(f"[ERROR] –ü–µ—Ä–µ–≤–æ–¥: {e}", flush=True)
        return text

def get_image():
    try:
        url = f"https://picsum.photos/800/600?random={int(time.time())}"
        img_bytes = requests.get(url, timeout=10).content
        image = Image.open(BytesIO(img_bytes)).convert("RGBA")
        return overlay_logo(image)
    except Exception as e:
        print(f"[ERROR] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}", flush=True)
        return None

def overlay_logo(image):
    try:
        if not os.path.exists(LOGO_PATH):
            output = BytesIO()
            image.save(output, format="PNG")
            output.seek(0)
            return output
        logo = Image.open(LOGO_PATH).convert("RGBA")
        base_width = int(image.width * 0.15)
        h_size = int((base_width / logo.width) * logo.height)
        logo = logo.resize((base_width, h_size), Image.LANCZOS)
        pos = (image.width - logo.width - 10, image.height - logo.height - 10)
        image.paste(logo, pos, logo)
        output = BytesIO()
        image.save(output, format="PNG")
        output.seek(0)
        return output
    except Exception as e:
        print(f"[ERROR] –õ–æ–≥–æ—Ç–∏–ø: {e}", flush=True)
        output = BytesIO()
        image.save(output, format="PNG")
        output.seek(0)
        return output

def send_post(quote, author, image_bytes):
    if not image_bytes or image_bytes.getbuffer().nbytes == 0:
        print("[WARN] –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", flush=True)
        return

    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
        firma = random.choice(FIRMA_SIGNATURES)
        text = f"[{random.choice(CATEGORIES).upper()}] {quote}\n‚Äî {author}\n{firma}\n{' '.join(random.sample(HASHTAGS, 2))}"
        resp = requests.post(
            url,
            data={"chat_id": TELEGRAM_CHAT_ID, "caption": text},
            files={"photo": ("post.png", image_bytes, "image/png")},
            timeout=15
        )
        if resp.status_code == 200:
            print("[‚úÖ] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", flush=True)
        else:
            print(f"[‚ùå] –û—à–∏–±–∫–∞ Telegram: {resp.status_code} {resp.text}", flush=True)
    except Exception as e:
        print(f"[‚ùå] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", flush=True)

def job_post():
    print("[üîÑ] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞...", flush=True)
    quote, author = get_quote()
    quote_ru = translate_quote(quote)
    image = get_image()
    if image is None:
        print("[WARN] –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", flush=True)
        return
    send_post(f"{quote} ({quote_ru})", author, image)

app = Flask(__name__)

@app.route('/')
def home():
    return "üöÜ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç."

@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return jsonify({"ok": True})

    message = update["message"]
    chat_id = str(message["chat"]["id"])
    text = message.get("text", "").strip()

    if not ADMIN_CHAT_ID or str(chat_id) != str(ADMIN_CHAT_ID):
        print(f"[DEBUG] –ö–æ–º–∞–Ω–¥–∞ –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–∞: {chat_id}", flush=True)
        return jsonify({"ok": True})

    def send_reply(text):
        try:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={"chat_id": chat_id, "text": text}
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}", flush=True)

    if text == "/post_now":
        print(f"[INFO] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /post_now –æ—Ç {chat_id}", flush=True)
        Thread(target=job_post).start()
        send_reply("‚úÖ –ü–æ—Å—Ç –∑–∞–ø—É—â–µ–Ω!")
    elif text == "/status":
        send_reply("üü¢ –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞ –≤ –ø—É—Ç–∏!")

    return jsonify({"ok": True})

def run_flask():
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

Thread(target=run_flask, daemon=True).start()

def ensure_webhook():
    if not WEBHOOK_URL:
        print("[WARN] WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", flush=True)
        return
    full_url = f"{WEBHOOK_URL.rstrip('/')}/webhook"
    resp = requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
        json={"url": full_url}
    )
    print(f"[INFO] Webhook response: {resp.json()}", flush=True)

ensure_webhook()

schedule.every(3).hours.do(job_post)

def run_scheduler():
    print("[‚è∞] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–æ—Å—Ç –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", flush=True)
    while True:
        schedule.run_pending()
        time.sleep(30)

Thread(target=run_scheduler, daemon=True).start()

print("[üöÄ] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞...", flush=True)
job_post()

print("[üü¢] –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", flush=True)
while True:
    time.sleep(60)
